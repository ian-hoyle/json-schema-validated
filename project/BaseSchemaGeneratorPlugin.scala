import sbt._
import Keys._
import scala.util.Using
import scala.io.Source

/** Auto plugin to generate BaseSchema object containing property name constants from a base JSON schema. */
object BaseSchemaGeneratorPlugin extends AutoPlugin {
  object autoImport {
    val generateBaseSchemaConstants = taskKey[Seq[File]]("Generate BaseSchema property name constants from base schema JSON")
    val baseSchemaJsonFile          = settingKey[File]("Location of the base JSON schema file (must contain top-level 'properties')")
    val baseSchemaObjectPackage     = settingKey[String]("Scala package for generated BaseSchema object")
    val baseSchemaObjectName        = settingKey[String]("Name of generated Scala object containing constants")
  }
  import autoImport._

  override def trigger: PluginTrigger = allRequirements

  override def projectSettings: Seq[Setting[_]] = Seq(
    baseSchemaJsonFile      := (Compile / resourceDirectory).value / "organisationBase.json",
    baseSchemaObjectPackage := "validation.generated",
    baseSchemaObjectName    := "BaseSchema",
    Compile / sourceGenerators += generateBaseSchemaConstants.taskValue,
    generateBaseSchemaConstants := {
      val log        = streams.value.log
      val schemaFile = baseSchemaJsonFile.value
      val outDir     = (Compile / sourceManaged).value / "generated"
      val objectName = baseSchemaObjectName.value
      val pkg        = baseSchemaObjectPackage.value

      log.info("[BaseSchemaGenerator] Task started")
      log.info("[BaseSchemaGenerator] schemaFile = " + schemaFile)
      log.info("[BaseSchemaGenerator] outDir = " + outDir)

      if (!schemaFile.exists()) {
        log.warn("[BaseSchemaGenerator] Schema file not found: " + schemaFile)
        Seq.empty
      } else {
        log.info("[BaseSchemaGenerator] Generating constants from: " + schemaFile.getName)
        import ujson._
        val jsonStr = Using(Source.fromFile(schemaFile)(scala.io.Codec.UTF8))(_.mkString).get
        val parsed  = ujson.read(jsonStr)

        val propNames: Seq[String] = parsed.obj.get("properties") match {
          case Some(obj: ujson.Obj) => obj.value.keys.toSeq.sorted
          case _ =>
            log.warn("[BaseSchemaGenerator] No 'properties' object found in base schema. Nothing generated.")
            Seq.empty
        }

        if (propNames.isEmpty) {
          log.warn("[BaseSchemaGenerator] No property names extracted. Skipping generation.")
          Seq.empty
        } else {
          val constants = propNames.map { name =>
            val prefixed = if (name.nonEmpty && name.charAt(0).isDigit) "_" + name else name
            val safe = prefixed
              .replaceAll("[^A-Za-z0-9_]", "_")
              .replaceAll("_+", "_")
              .stripSuffix("_")
            "  final val " + safe + ": String = \"" + name + "\""
          }.mkString("\n")

          val code =
            """|// AUTO-GENERATED FILE. DO NOT EDIT DIRECTLY.
               |// Generated by BaseSchemaGeneratorPlugin from: %s
               |package %s
               |
               |/**
               | * Constants representing property names from the base schema file.
               | * Total properties: %d
               | */
               |object %s {
               |%s
               |}
               |""".stripMargin.format(schemaFile.getName, pkg, propNames.size, objectName, constants)

          outDir.mkdirs()
          val outFile = outDir / (objectName + ".scala")
          IO.write(outFile, code)
          log.info("[BaseSchemaGenerator] Wrote " + outFile.getAbsolutePath + s" (${propNames.size} constants)")
          Seq(outFile)
        }
      }
    }
  )
}
